import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { Midi } from '@tonejs/midi'
import { useEffect, useState } from 'react'
import * as Tone from 'tone'
import SongPlayer from '../components/SongPlayer/SongPlayer'
import MIDIKeyboard from '../components/MIDIKeyboard'

const Home: NextPage = () => {
  const [midiFile, setMidiFile] = useState<Midi | null>(null)
  const [synths, setSynths] = useState<Tone.PolySynth[]>([])
  const [currentTrackId, setCurrentTrackId] = useState<number>(0)
  const [playing, setPlaying] = useState<boolean>(false)

  const handleMidiImport = (e) => {
    console.log('Input change', e.target.files)
    var fr = new FileReader();
    fr.onload = function () {
        var data = fr.result;
        if(!data) return;
        console.log('Loading midi file...', data)
        
        // Parse MIDI
        const midi = new Midi(data);
        console.log('Parsed midi file', midi)

        if(midi) setMidiFile(midi);
        
    };
    fr.readAsArrayBuffer(e.target.files[0]);
  }


  const playSong = () => {
    if(!midiFile) return
    console.log('Playing song')
    setPlaying(true);

    // Play song
    const now = Tone.now() + 0.5
    const track = midiFile.tracks[currentTrackId];
      //create a synth for each track
      const synth = new Tone.PolySynth(Tone.Synth, {
        envelope: {
          attack: 0.02,
          decay: 0.1,
          sustain: 0.3,
          release: 1
        }
      }).toDestination()
      setSynths((prevSynths) => ([...prevSynths, synth]))
      //schedule all of the events
      track.notes.forEach(note => {
        synth.triggerAttackRelease(note.name, note.duration, note.time + now, note.velocity)
      })
  }

  const handleTrackSelect = (e) => {
    setCurrentTrackId(e.target.value)
  }

  useEffect(() => {
    if(!playing && synths.length > 0) {
					//dispose the synth and make a new one
          synths.forEach((synth) => synth.dispose())
					setSynths([])
    }
  }, [synths, playing])

  return (
    <div className={styles.container}>
      <Head>
        <title>MIDI Experiments</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        {midiFile && <SongPlayer playing={playing} track={midiFile.tracks[currentTrackId]} />}

        <input type="file" name="MIDIUpload" onChange={handleMidiImport} />
        {midiFile && (
          <div>
            <select value={currentTrackId} onChange={handleTrackSelect}>
              {midiFile.tracks.map((track, id) => <option key={`Track ${id}`} value={id}>Track {id} - {track.name}</option>)}
            </select>
            <button onClick={playSong}>Play Song</button>
          </div>
        )}

        <MIDIKeyboard />
      </main>
    </div>
  )
}

export default Home
